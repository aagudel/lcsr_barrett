
import("rtt_ros");
ros.import("oro_barrett_hw");
ros.import("conman");
ros.import("conman_ros");
ros.import("conman_blocks");

/* Create the barrett manager */
loadComponent("barrett_hw_manager","oro_barrett_hw::BarrettHWManager");
loadService("barrett_hw_manager","rosparam");

barrett_hw_manager.rosparam.getAll();
barrett_hw_manager.rosparam.getAbsolute("robot_description");

barrett_hw_manager.configure();
barrett_hw_manager.configureWam7("wam");
barrett_hw_manager.rosparam.getComponentPrivate("wam");

barrett_hw_manager.configureHand("wam/bhand");

/* Publish joint state to ROS */
stream("barrett_hw_manager.wam.joint_state_out",rostopic.connection("wam_joint_states"));
stream("barrett_hw_manager.hand.joint_state_out",rostopic.connection("hand_joint_states"));

stream("barrett_hw_manager.hand.joint_cmd_in",rostopic.connection("hand_cmd"));

/* Create calibration PID controller loop */
ros.import("lcsr_controllers");
loadComponent("cal_pid","lcsr_controllers::JointPIDController");
loadComponent("cal_traj","lcsr_controllers::JointTrajGeneratorKDL");
loadComponent("cal_sac","lcsr_controllers::SemiAbsoluteCalibrationController");

connect("barrett_hw_manager.wam.position_out", "cal_sac.joint_position_in", ConnPolicy());
connect("barrett_hw_manager.wam.resolver_offset_out", "cal_sac.resolver_offset_in", ConnPolicy());

connect("cal_sac.joint_position_estimate_out", "cal_pid.joint_position_in", ConnPolicy());
connect("barrett_hw_manager.wam.velocity_out", "cal_pid.joint_velocity_in", ConnPolicy());
connect("cal_traj.joint_position_out", "cal_pid.joint_position_cmd_in", ConnPolicy());
connect("cal_traj.joint_velocity_out", "cal_pid.joint_velocity_cmd_in", ConnPolicy());

connect("cal_sac.joint_position_estimate_out", "cal_traj.joint_position_in", ConnPolicy());
connect("cal_sac.joint_position_desired_out", "cal_traj.joint_position_cmd_in", ConnPolicy());

connect("cal_pid.joint_effort_out", "barrett_hw_manager.wam.effort_in", ConnPolicy());

/* Create Feed-Forward  component */
loadComponent("inverse_dynamics","lcsr_controllers::IDControllerKDL");
connect("barrett_hw_manager.wam.position_out", "inverse_dynamics.joint_position_in", ConnPolicy());
connect("barrett_hw_manager.wam.velocity_out", "inverse_dynamics.joint_velocity_in", ConnPolicy());

/* Create manual controller loop */
loadComponent("man_pid","lcsr_controllers::JointPIDController");
loadComponent("man_traj","lcsr_controllers::JointTrajGeneratorKDL");
loadComponent("wam_effort_sum","conman_blocks::VectorSum");

connect("barrett_hw_manager.wam.position_out", "man_pid.joint_position_in", ConnPolicy());
connect("barrett_hw_manager.wam.velocity_out", "man_pid.joint_velocity_in", ConnPolicy());
connect("man_traj.joint_position_out", "man_pid.joint_position_cmd_in", ConnPolicy());
connect("man_traj.joint_velocity_out", "man_pid.joint_velocity_cmd_in", ConnPolicy());

connect("barrett_hw_manager.wam.position_out", "man_traj.joint_position_in", ConnPolicy());

connect("man_pid.joint_effort_out", "wam_effort_sum.addends_in", ConnPolicy());
connect("inverse_dynamics.joint_effort_out", "wam_effort_sum.addends_in", ConnPolicy());

connect("wam_effort_sum.sum_out", "barrett_hw_manager.wam.effort_in", ConnPolicy());

/* Create the conman scheme */
loadComponent("scheme","conman::Scheme");
setActivity("scheme",0.001,HighestPriority,ORO_SCHED_RT)
loadService("scheme","conman_ros")

/* Slave the barrett manager's activity to the scheme */
//barrett_hw_manager.conman_hook.setDesiredMinPeriod(0.0);
addPeer("scheme","barrett_hw_manager");
addPeer("scheme","wam_effort_sum");
addPeer("scheme","cal_pid");
addPeer("scheme","cal_traj");
addPeer("scheme","cal_sac");
addPeer("scheme","man_pid");
addPeer("scheme","man_traj");
addPeer("scheme","inverse_dynamics");

scheme.addGroup("devices");
scheme.addToGroup("barrett_hw_manager","devices");
scheme.latchInputs("barrett_hw_manager",true);
barrett_hw_manager.conman_hook.setInputExclusivity("wam.effort_in",1)

scheme.addGroup("calibration");
scheme.addToGroup("cal_pid","calibration");
scheme.addToGroup("cal_traj","calibration");
scheme.addToGroup("cal_sac","calibration");

scheme.addGroup("manual");
scheme.addToGroup("man_pid","manual");
scheme.addToGroup("man_traj","manual");
scheme.addToGroup("wam_effort_sum","manual");

scheme.addBlock("inverse_dynamics");

/* Start the Scheme */
scheme.configure();

cal_pid.configure();
cal_sac.configure();
cal_traj.configure();

man_pid.configure();
man_traj.configure();
wam_effort_sum.configure();

inverse_dynamics.configure();

/* Set initially running blocks */
scheme.enableBlock("devices",false);
scheme.disableBlock("calibration");
scheme.enableBlock("manual",false);

scheme.start();

/* Calibrate joint positions */
// barrett_hw_manager.wam.calibrateNearHome()
